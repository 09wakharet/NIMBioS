{
    "collab_server" : "",
    "contents" : "##############################################\n# FUNCTION FOR SETTING PARAMETERS BETA,GAMMA #\n##############################################\n\n\n#COUPLED DIFFERENTIAL EQUATIONS FOR TWO HOST DIRECT TRANSMISSION\n\nMultSIR.model <- function(t, b, g, b2, g2){ # function of t, b and g\n  require(deSolve) # call in of the deSolve package\n  \n  initI <- 1e-6\n  initI2 <- 1e-5\n  \n  \n  init <- c(S=1-initI,I=initI,R=0,S2 = 1- initI2, I2 = initI2, R2 = 0) #initial conditions of proportions\n  parameters <- c(bet=b,gamm=g,bet2 = b2, gamm2 = g2) #paramters in the ode\n  time <- seq(0,t,by=t/(4*length(1:t))) #time sequence for the ode solution\n  \n  eqn <- function(time,state,parameters){ #SIR odes\n    with(as.list(c(state,parameters)),{ #solve the ode using the parameters\n      dS <- -bet*S*I #change in proportion of susceptibles (dS/dt)\n      dI <- bet*S*I-gamm*I #change in proportion of infected (dI/dt)\n      dR <- gamm*I #change in proportion of the recovered (dR/dt)\n      \n      dS2 <- -bet2*S2*I2 #change in proportion of susceptibles (dS/dt)\n      dI2 <- bet2*S2*I2-gamm2*I2 #change in proportion of infected (dI/dt)\n      dR2 <- gamm2*I2 #change in proportion of the recovered (dR/dt)\n      \n      return(list(c(dS,dI,dR,dS2,dI2,dR2)))}) #out as a list containing the values\n  }\n  \n  out<-ode(y=init,times=time,eqn,parms=parameters) #solve the ode using ode() in deSolve package\n  out.df<-as.data.frame(out) #create a data frame of the output of ode()\n  df1 = out.df[,1:4]\n  df2 = cbind(time, out.df[,5:7])\n  colnames(df2)<-c(\"time\",\"S\",\"I\",\"R\")\n  #print(df1)\n  #print(df2)\n  \n  require(ggplot2) #call in ggplot2 package\n\n  SIR.plot<- function(dataframe, number, beta, gamma){\n    mytheme4 <- theme_bw() + # assign a theme, all NULL values will default to bw-theme\n      theme(text=element_text(colour=\"black\")) + #set all text in the plot to white\n      theme(panel.grid = element_line(colour = \"white\")) + #set grid in plot to white\n      theme(panel.background = element_rect(fill = \"#B2B2B2\")) #set plot bg as grey\n    theme_set(mytheme4) #http://docs.ggplot2.org/current/theme_update.html\n    \n    title <- bquote(paste(\"SIR Model: Host \", .(number))) #title for plot\n    subtit<-bquote(list(beta==.(beta),~gamma==.(gamma))) #use of bquote to include Greek symbols of beta and gamma into subtitle\n    ggplot(dataframe,aes(x=time))+ #set plot of ode data frame output and x-variable as time\n      ggtitle(bquote(atop(bold(.(title)),atop(bold(.(subtit))))))+ # create the title and subtitle based on http://stackoverflow.com/q/30338719/6168956\n      geom_line(aes(y=S,colour=\"Susceptible\"))+ #assign plot line as S from out.df\n      geom_line(aes(y=I,colour=\"Infected\"))+ #assign plot line as I from out.df\n      geom_line(aes(y=R,colour=\"Recovered\"))+ #assign plot line as R from out.df\n      ylab(label=\"Proportion\")+ #y-axis label\n      xlab(label=\"Time (days)\")+ #x-axis label\n      theme(legend.justification=c(1,0), legend.position=c(1,0.5))+ #legend justification - anchorpoint of legend, legend.position based on two-element numeric vector (x,y)\n      theme(legend.title=element_text(size=12,face=\"bold\"), #set font specification of title\n            legend.background = element_rect(fill='#FFFFFF',size=0.5,linetype=\"solid\"), #legend background set to white\n            legend.text=element_text(size=10), #set legend text size\n            legend.key=element_rect(colour=\"#FFFFFF\", #set legend keys border to white\n                                    fill='#C2C2C2', #fill set to gray\n                                    size=0.25, #size of border\n                                    linetype=\"solid\"))+ #line type of border\n      scale_colour_manual(\"Compartments\", #title of legend\n                          breaks=c(\"Susceptible\",\"Infected\",\"Recovered\"), #each level of lines, set to colour\n                          values=c(\"blue\",\"red\",\"darkgreen\")) #colours for each respective level\n\n  }\n  \n\n  plots <- list()\n  plots[[1]] = SIR.plot(df1,1,b,g)\n  plots[[2]] = SIR.plot(df2,2,b2,g2)\n\n  ggsave(filename = paste0(\"MultipleHosts/time_\",t,\"_beta_\",b,\"_gamma_\",g,\"_beta2_\",b2,\"_gamma2_\",g2,\".png\"), width =4, height =8, arrangeGrob(grobs = plots))\n  \n}\n\n",
    "created" : 1497025777557.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "498527741",
    "id" : "50C77251",
    "lastKnownWriteTime" : 1497217632,
    "last_content_update" : 1497217632461,
    "path" : "C:/Users/twakh/Desktop/NIMBioS/SIRBasic/MultipleHosts/MultHost.R",
    "project_path" : "MultipleHosts/MultHost.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}